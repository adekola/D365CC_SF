(()=>{"use strict";({973:function(e,o){var n=this&&this.__awaiter||function(e,o,n,t){return new(n||(n=Promise))(function(r,c){function s(e){try{l(t.next(e))}catch(e){c(e)}}function a(e){try{l(t.throw(e))}catch(e){c(e)}}function l(e){var o;e.done?r(e.value):(o=e.value,o instanceof n?o:new n(function(e){e(o)})).then(s,a)}l((t=t.apply(e,o||[])).next())})};Object.defineProperty(o,"__esModule",{value:!0});class t{constructor(){this.conversationStartTimes={},this.callerNumbers={}}initialize(){if(void 0===window.sforce||void 0===window.sforce.opencti){const e="/support/api/54.0/lightning/opencti.js",o=`${new URL(document.referrer).origin}${e}`;return t.loadScript(o)}return Promise.resolve(!0)}bindEvents(){var e,o;const t=null===(o=null===(e=window.Microsoft)||void 0===e?void 0:e.CCaaS)||void 0===o?void 0:o.EmbedSDK;t&&(t.conversation.onConversationLoaded(e=>{console.log("Conversation loaded:",e),console.log("Available properties:",Object.keys(e)),console.log("customerPhoneNumber:",e.customerPhoneNumber),console.log("customerName:",e.customerName);const{liveWorkItemId:o,customerPhoneNumber:n}=e;console.log(e),this.conversationStartTimes[o]=new Date,this.callerNumbers[o]=n||"",console.log("Stored phone number:",this.callerNumbers[o])}),t.conversation.onStatusChange(e=>n(this,void 0,void 0,function*(){const{liveWorkItemId:o,statusCode:n}=e;if(console.log("Status update received:",e),5===n||4===n){const e=this.conversationStartTimes[o],n=new Date,t=Math.floor((n.getTime()-e.getTime())/1e3),r=this.callerNumbers[o];let c=null,s="Unknown";if(r)try{const e=yield this.findContactByPhone(r);e?(c=e.Id,s=e.Name,console.log(`Found existing contact: ${s} (${c})`)):console.log(`No contact found for phone number: ${r}`)}catch(e){console.error("Error searching for contact:",e)}const a=Object.assign(Object.assign({Subject:`Call with ${s}`,TaskSubtype:"Call",CallType:"Inbound",CallDurationInSeconds:t,Phone:r,ActivityDate:(new Date).toISOString().split("T")[0],Status:"Completed",Priority:"Normal"},c&&{WhoId:c}),{Call_Start_Time__c:e.toISOString(),Call_End_Time__c:n.toISOString(),Description:`Inbound call from ${s} (${r||"Unknown number"})\nDuration: ${Math.floor(t/60)}:${(t%60).toString().padStart(2,"0")}\nStart: ${e.toLocaleString()}\nEnd: ${n.toLocaleString()}\n`+(c?"Linked to existing contact":"No existing contact found"),entityApiName:"Task"});console.log("Enhanced Task log data to be saved:",a),window.sforce.opencti.saveLog({value:a,callback:e=>{e.success?console.log(`Task logged successfully and ${c?"linked to contact "+c:"created without contact link"}:`,e):console.error("Failed to save task:",e.errors||"An unknown error occurred.")}})}})))}static loadScript(e){return new Promise((o,n)=>{const t=document.createElement("script");t.type="text/javascript",t.async=!0,t.src=e,t.onload=function(){o(!0)},t.onerror=function(){n(new Error(`Error in loading ${e}`))},document.getElementsByTagName("head")[0].appendChild(t)})}findContactByPhone(e){return n(this,void 0,void 0,function*(){if(!e||""===e.trim())return null;const o=this.cleanPhoneNumber(e);return new Promise(e=>{window.sforce.opencti.searchAndScreenPop({searchParams:o,queryParams:"Contact",callType:window.sforce.opencti.CALL_TYPE.INBOUND,callback:o=>{if(console.log("=== FULL SEARCH RESULT DEBUG ==="),console.log("result.success:",o.success),console.log("result.returnValue type:",typeof o.returnValue),console.log("result.returnValue:",JSON.stringify(o.returnValue,null,2)),o.success&&o.returnValue){const n=this.parseContactSearchResults(o.returnValue);console.log("Parsed contacts:",n),n&&n.length>0?e(n[0]):e(null)}else console.log("No contacts found or search failed:",o),e(null)}})})})}cleanPhoneNumber(e){return e.replace(/[^\d+]/g,"")}parseContactSearchResults(e){try{console.log("=== PARSING SEARCH RESULTS ==="),console.log("searchResults type:",typeof e),console.log("searchResults:",e);let o=e;if(!Array.isArray(o)){if(!o||"object"!=typeof o||!o.Id)return console.log("Records is not an array and not a single record:",o),null;o=[o],console.log("Converted single record to array:",o)}console.log("Processing",o.length,"records");const n=o.map((e,o)=>(console.log(`Record ${o}:`,e),console.log(`Record ${o} RecordType:`,e.RecordType),e)).filter(e=>"Contact"===e.RecordType).map(e=>{const o={Id:e.Id,Name:e.Name||"Unknown Contact"};return console.log("Mapped contact:",o),o});return console.log("Final contacts array:",n),n.length>0?n:null}catch(o){return console.error("Error parsing contact search results:",o),console.error("searchResults that caused error:",e),null}}}window.CCaaS=window.CCaaS||{},window.CCaaS.CTIDriver||(window.CCaaS.CTIDriver=t),o.default=t}})[973](0,{})})();
