(()=>{"use strict";({973:function(o,e){var n=this&&this.__awaiter||function(o,e,n,t){return new(n||(n=Promise))(function(r,c){function s(o){try{a(t.next(o))}catch(o){c(o)}}function l(o){try{a(t.throw(o))}catch(o){c(o)}}function a(o){var e;o.done?r(o.value):(e=o.value,e instanceof n?e:new n(function(o){o(e)})).then(s,l)}a((t=t.apply(o,e||[])).next())})};Object.defineProperty(e,"__esModule",{value:!0});class t{constructor(){this.conversationStartTimes={},this.callerNumbers={}}initialize(){if(void 0===window.sforce||void 0===window.sforce.opencti){const o="/support/api/54.0/lightning/opencti.js",e=`${new URL(document.referrer).origin}${o}`;return t.loadScript(e)}return Promise.resolve(!0)}bindEvents(){var o,e;const t=null===(e=null===(o=window.Microsoft)||void 0===o?void 0:o.CCaaS)||void 0===e?void 0:e.EmbedSDK;console.log("INSIDE"),t&&(t.conversation.onAccept(o=>{console.log("INSIDE 2");const{liveWorkItemId:e,customerPhoneNumber:n}=o;console.log(o),console.log(e),console.log(n)}),t.conversation.onConversationLoaded(o=>{console.log("Conversation loaded:",o),console.log("Available properties:",Object.keys(o)),console.log("customerPhoneNumber:",o.customerPhoneNumber),console.log("customerName:",o.customerName);const{liveWorkItemId:e,customerPhoneNumber:n}=o;console.log(o),this.conversationStartTimes[e]=new Date,this.callerNumbers[e]=n||"",console.log("Stored phone number:",this.callerNumbers[e])}),t.conversation.onStatusChange(o=>n(this,void 0,void 0,function*(){const{liveWorkItemId:e,statusCode:n}=o;if(console.log("Status update received:",o),5===n||4===n){const o=this.conversationStartTimes[e],n=new Date,t=Math.floor((n.getTime()-o.getTime())/1e3),r=this.callerNumbers[e];let c=null,s="Unknown";if(r)try{const o=yield this.findContactByPhone(r);o?(c=o.Id,s=o.Name,console.log(`Found existing contact: ${s} (${c})`)):console.log(`No contact found for phone number: ${r}`)}catch(o){console.error("Error searching for contact:",o)}const l=Object.assign(Object.assign({Subject:`Call with ${s}`,TaskSubtype:"Call",CallType:"Inbound",CallDurationInSeconds:t,Phone:r,ActivityDate:(new Date).toISOString().split("T")[0],Status:"Completed",Priority:"Normal"},c&&{WhoId:c}),{Call_Start_Time__c:o.toISOString(),Call_End_Time__c:n.toISOString(),Description:`Inbound call from ${s} (${r||"Unknown number"})\nDuration: ${Math.floor(t/60)}:${(t%60).toString().padStart(2,"0")}\nStart: ${o.toLocaleString()}\nEnd: ${n.toLocaleString()}\n`+(c?"Linked to existing contact":"No existing contact found"),entityApiName:"Task"});console.log("Enhanced Task log data to be saved:",l),window.sforce.opencti.saveLog({value:l,callback:o=>{o.success?console.log(`Task logged successfully and ${c?"linked to contact "+c:"created without contact link"}:`,o):console.error("Failed to save task:",o.errors||"An unknown error occurred.")}})}})))}static loadScript(o){return new Promise((e,n)=>{const t=document.createElement("script");t.type="text/javascript",t.async=!0,t.src=o,t.onload=function(){e(!0)},t.onerror=function(){n(new Error(`Error in loading ${o}`))},document.getElementsByTagName("head")[0].appendChild(t)})}findContactByPhone(o){return n(this,void 0,void 0,function*(){if(!o||""===o.trim())return null;const e=this.cleanPhoneNumber(o);return new Promise(o=>{window.sforce.opencti.searchAndScreenPop({searchParams:e,queryParams:"Contact",callType:window.sforce.opencti.CALL_TYPE.INBOUND,callback:e=>{var n;if(console.log("=== FULL SEARCH RESULT DEBUG ==="),console.log("result.success:",e.success),console.log("result.returnValue type:",typeof e.returnValue),console.log("result.returnValue:",JSON.stringify(e.returnValue,null,2)),console.log("result.returnValue keys:",Object.keys(e.returnValue||{})),e.success&&e.returnValue){let t=e.returnValue;const r=this.parseContactSearchResults(t);if(r&&r.length>0)return console.log("Found contact via parsing:",r[0]),void o(r[0]);if("Contact"===t.RecordType||t.attributes&&"Contact"===t.attributes.type)return console.log("Found single Contact record via direct access"),void o({Id:t.Id,Name:t.Name||(null===(n=t.attributes)||void 0===n?void 0:n.name)||"Unknown Contact"});console.log("No Contact records found in results"),o(null)}else console.log("No contacts found or search failed:",e),o(null)}})})})}cleanPhoneNumber(o){return o.replace(/[^\d+]/g,"")}parseContactSearchResults(o){try{if(console.log("=== PARSING SEARCH RESULTS ==="),console.log("searchResults type:",typeof o),console.log("searchResults:",o),console.log("searchResults keys:",Object.keys(o||{})),!o||"object"!=typeof o)return console.log("No valid search results to parse"),null;const e=Object.values(o);if(console.log("Converted to records array:",e),0===e.length)return console.log("No records found in search results"),null;console.log("Processing",e.length,"records");const n=e.map((o,e)=>(console.log(`Record ${e}:`,o),console.log(`Record ${e} RecordType:`,o.RecordType),console.log(`Record ${e} Id:`,o.Id),console.log(`Record ${e} Name:`,o.Name),o)).filter(o=>{const e="Contact"===o.RecordType;return console.log(`Record ${o.Id} is Contact:`,e),e}).map(o=>{const e={Id:o.Id,Name:o.Name||"Unknown Contact"};return console.log("Mapped contact:",e),e});return console.log("Final contacts array:",n),n.length>0?n:null}catch(e){return console.error("Error parsing contact search results:",e),console.error("searchResults that caused error:",o),null}}}window.CCaaS=window.CCaaS||{},window.CCaaS.CTIDriver||(window.CCaaS.CTIDriver=t),e.default=t}})[973](0,{})})();
